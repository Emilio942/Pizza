#!/usr/bin/env python3
"""
Test script for OV2640 Camera Timing Emulation
Verifies the initialization sequence and capture timing logic
"""

import sys
import os
from pathlib import Path

# Add src directory to path
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root / "src"))

from emulation.ov2640_timing_emulator import OV2640TimingEmulator

def test_ov2640_initialization_and_capture():
    """Test complete OV2640 initialization and capture sequence"""
    print("Starting OV2640 Timing Emulation Test")
    print("=" * 50)
    
    # Create emulator instance
    emulator = OV2640TimingEmulator()
    
    # Initialize log file
    with open(emulator.log_file, "w") as f:
        f.write("OV2640 Camera Timing Emulation Log\n")
        f.write("=" * 40 + "\n")
        f.write("Generated by test_ov2640_timing.py\n\n")
    
    print(f"Log file: {emulator.log_file}")
    
    # Test 1: Complete initialization sequence
    print("\n1. Testing camera initialization sequence...")
    init_success = emulator.emulate_camera_init_sequence()
    
    if init_success:
        print("✓ Camera initialization successful")
    else:
        print("✗ Camera initialization failed")
        return False
    
    # Test 2: Frame capture (48x48 RGB565 for pizza detection)
    print("\n2. Testing frame capture sequence...")
    capture_success = emulator.emulate_frame_capture(width=48, height=48, format_name="RGB565")
    
    if capture_success:
        print("✓ Frame capture successful")
    else:
        print("✗ Frame capture failed")
        return False
    
    # Test 3: Additional captures to test consistency
    print("\n3. Testing multiple captures...")
    for i in range(3):
        success = emulator.emulate_frame_capture(width=48, height=48, format_name="RGB565")
        if success:
            print(f"✓ Capture {i+1} successful")
        else:
            print(f"✗ Capture {i+1} failed")
            return False
    
    # Generate detailed timing analysis
    print("\n4. Generating detailed timing analysis...")
    emulator.save_detailed_log()
    
    # Print summary
    summary = emulator.get_timing_summary()
    print(f"\nTiming Summary:")
    print(f"- Camera State: {summary['state']}")
    print(f"- I2C Transactions: {summary['i2c_transactions']}")
    print(f"- GPIO Events: {summary['gpio_events']}")
    print(f"- Frames Captured: {summary['frames_captured']}")
    print(f"- Registers Written: {summary['registers_written']}")
    
    return True

def verify_log_content():
    """Verify that the log file contains expected content"""
    log_file = Path("output/emulator_logs/ov2640_timing.log")
    
    if not log_file.exists():
        print(f"✗ Log file not found: {log_file}")
        return False
    
    print(f"\n5. Verifying log file content...")
    
    with open(log_file, "r") as f:
        content = f.read()
    
    # Check for key initialization sequences
    required_sequences = [
        "INIT_START",
        "GPIO Initialization", 
        "Power Up Sequence",
        "Device ID Verification",
        "Software Reset",
        "Loading 48x48 Configuration",
        "INIT_COMPLETE",
        "CAPTURE_START",
        "Frame Capture 48x48 RGB565",
        "VSYNC HIGH - Frame start",
        "VSYNC LOW - Frame end",
        "CAPTURE_COMPLETE"
    ]
    
    missing_sequences = []
    for sequence in required_sequences:
        if sequence not in content:
            missing_sequences.append(sequence)
    
    if missing_sequences:
        print(f"✗ Missing required sequences in log: {missing_sequences}")
        return False
    
    print("✓ All required sequences found in log")
    
    # Check for timing information
    timing_keywords = ["I2C_WRITE", "I2C_READ", "GPIO_WRITE", "CAPTURE_TIMING", "µs", "ms"]
    timing_found = [kw for kw in timing_keywords if kw in content]
    
    if len(timing_found) < 4:
        print(f"✗ Insufficient timing information in log")
        return False
    
    print("✓ Timing information present in log")
    
    return True

def main():
    """Main test function"""
    print("OV2640 Camera Timing and Capture Logic Emulator Test")
    print("Task: HWEMU-1.1")
    print("=" * 60)
    
    try:
        # Run the emulation test
        test_success = test_ov2640_initialization_and_capture()
        
        if not test_success:
            print("\n✗ Emulation test failed")
            return 1
        
        # Verify log content
        log_success = verify_log_content()
        
        if not log_success:
            print("\n✗ Log verification failed")
            return 1
        
        print("\n" + "=" * 60)
        print("✓ ALL TESTS PASSED")
        print("✓ OV2640 timing and capture logic emulation complete")
        print("✓ Initialization sequence verified")
        print("✓ Frame capture timing verified")
        print("✓ Log file generated: output/emulator_logs/ov2640_timing.log")
        print("\nTask HWEMU-1.1 completed successfully!")
        
        return 0
        
    except Exception as e:
        print(f"\n✗ Test failed with exception: {e}")
        import traceback
        traceback.print_exc()
        return 1

if __name__ == "__main__":
    sys.exit(main())
