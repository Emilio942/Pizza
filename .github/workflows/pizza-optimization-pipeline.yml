name: Pizza Model Optimization Pipeline

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:  # Allows manual triggering of the workflow

jobs:
  setup:
    name: Setup Environment
    runs-on: ubuntu-latest
    outputs:
      python-version: ${{ steps.setup.outputs.python-version }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Python
        id: setup
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'
          cache-dependency-path: 'requirements.txt'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          echo "::set-output name=python-version::3.10"

  test:
    name: Run Tests
    needs: setup
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ needs.setup.outputs.python-version }}
          cache: 'pip'
          cache-dependency-path: 'requirements.txt'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      
      - name: Run pytest
        id: pytest
        run: |
          mkdir -p test-results
          python -m pytest tests/ -v --junitxml=test-results/junit.xml || echo "::warning::Some tests failed, but continuing"
      
      - name: Run automated test suite
        id: automated-tests
        run: |
          mkdir -p output/test_results
          python scripts/automated_test_suite.py --output-dir output/test_results --detailed-report || echo "::warning::Automated test suite failed, but continuing"
      
      - name: Upload test results
        uses: actions/upload-artifact@v3
        with:
          name: test-results
          path: |
            test-results/
            output/test_results/
          retention-days: 7

  optimization:
    name: Run Optimization Scripts
    needs: [setup, test]
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ needs.setup.outputs.python-version }}
          cache: 'pip'
          cache-dependency-path: 'requirements.txt'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      
      - name: Run optimization scripts
        id: optimize
        run: |
          mkdir -p output/optimization
          bash scripts/ci/run_optimization_pipeline.sh
        continue-on-error: true
      
      - name: Upload optimization results
        uses: actions/upload-artifact@v3
        with:
          name: optimization-results
          path: output/optimization/
          retention-days: 7

  reporting:
    name: Generate Reports
    needs: [optimization]
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'
          cache-dependency-path: 'requirements.txt'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      
      - name: Download test artifacts
        uses: actions/download-artifact@v3
        with:
          name: test-results
          path: downloaded-test-results
      
      - name: Download optimization artifacts
        uses: actions/download-artifact@v3
        with:
          name: optimization-results
          path: downloaded-optimization-results
      
      - name: Generate reports
        run: |
          mkdir -p reports
          python scripts/ci/generate_pipeline_report.py \
            --test-dir downloaded-test-results \
            --optimization-dir downloaded-optimization-results \
            --output-dir reports
      
      - name: Upload reports
        uses: actions/upload-artifact@v3
        with:
          name: pipeline-reports
          path: reports/
          retention-days: 30

  documentation:
    name: Update Documentation
    needs: [reporting]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      
      - name: Download reports
        uses: actions/download-artifact@v3
        with:
          name: pipeline-reports
          path: downloaded-reports
      
      - name: Update pipeline documentation
        run: |
          mkdir -p docs/ci_cd
          cp -r downloaded-reports/* docs/ci_cd/
          
          # Update pipeline status file
          echo "Last updated: $(date)" > docs/ci_cd_pipeline.md
          echo "CI/CD Pipeline Status" >> docs/ci_cd_pipeline.md
          echo "====================" >> docs/ci_cd_pipeline.md
          echo "" >> docs/ci_cd_pipeline.md
          cat downloaded-reports/summary.md >> docs/ci_cd_pipeline.md
      
      - name: Commit documentation changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add docs/
          git commit -m "Update documentation from CI/CD pipeline" || echo "No changes to commit"
          git push
