import torch
import torch.nn as nn
import torch.nn.functional as F
import torchvision.transforms as transforms
from torchvision.transforms import functional as TVF
import random
import numpy as np
from PIL import Image, ImageEnhance, ImageFilter
import gc

from scripts.augment_classes import PizzaBurningEffect, OvenEffect, PizzaSegmentEffect

def apply_basic_augmentation(img, device=None):
    """Apply basic augmentation to a single image"""
    if torch.is_tensor(img) or hasattr(transforms, 'Compose'):
        # Use torchvision transforms for more efficient processing
        basic_transforms = [
            # Various rotations
            transforms.RandomApply([
                transforms.RandomRotation(180)
            ], p=0.9),
            
            # Various crops
            transforms.RandomApply([
                transforms.RandomResizedCrop(224, scale=(0.7, 1.0), ratio=(0.9, 1.1))
            ], p=0.8),
            
            # Flips
            transforms.RandomApply([
                transforms.RandomHorizontalFlip(p=0.5),
                transforms.RandomVerticalFlip(p=0.1)
            ], p=0.6),
            
            # Color variations
            transforms.RandomApply([
                transforms.ColorJitter(
                    brightness=0.4, contrast=0.4, 
                    saturation=0.4, hue=0.2
                )
            ], p=0.8),
            
            # Perspective transformations
            transforms.RandomApply([
                transforms.RandomPerspective(distortion_scale=0.2)
            ], p=0.3),
            
            # Various filters
            transforms.RandomApply([
                transforms.GaussianBlur(kernel_size=5, sigma=(0.1, 3.0))
            ], p=0.4),
            
            # Sharpening
            transforms.RandomApply([
                transforms.RandomAdjustSharpness(sharpness_factor=2)
            ], p=0.3),
        ]
        
        # Apply a random subset of transformations
        transform_list = []
        for transform in basic_transforms:
            if random.random() < 0.5:  # 50% chance for each transform
                transform_list.append(transform)
        
        # Ensure at least one transformation is used
        if not transform_list:
            transform_list.append(random.choice(basic_transforms))
        
        # Create composition and apply
        composed = transforms.Compose(transform_list)
        
        # Apply to PIL image or Tensor depending on input
        if isinstance(img, torch.Tensor):
            if device:
                img = img.to(device)
            pil_img = TVF.to_pil_image(img.cpu() if img.device.type != 'cpu' else img)
            augmented = composed(pil_img)
            augmented = TVF.to_tensor(augmented)
            if device:
                augmented = augmented.to(device)
            return augmented
        else:
            # PIL image input
            augmented = composed(img)
            return augmented
    else:
        # Fallback to traditional PIL-based augmentation (similar to original)
        augmented_images = []
        
        # Original image
        augmented_images.append(img.copy())
        
        # Horizontal flip
        if random.random() > 0.5:
            flipped = img.transpose(Image.FLIP_LEFT_RIGHT)
            augmented_images.append(flipped)
        
        # Rotation (slight)
        for angle in [random.uniform(-20, 20) for _ in range(2)]:
            rotated = img.rotate(angle, resample=Image.BICUBIC, expand=False)
            augmented_images.append(rotated)
        
        # Brightness variation
        brightness_factor = random.uniform(0.8, 1.2)
        brightness = ImageEnhance.Brightness(img).enhance(brightness_factor)
        augmented_images.append(brightness)
        
        # Contrast variation
        contrast_factor = random.uniform(0.8, 1.2)
        contrast = ImageEnhance.Contrast(img).enhance(contrast_factor)
        augmented_images.append(contrast)
        
        # Saturation variation
        saturation_factor = random.uniform(0.8, 1.2)
        saturation = ImageEnhance.Color(img).enhance(saturation_factor)
        augmented_images.append(saturation)
        
        # Sharpness variation
        sharpness_factor = random.uniform(0.8, 1.5)
        sharpness = ImageEnhance.Sharpness(img).enhance(sharpness_factor)
        augmented_images.append(sharpness)
        
        # Gaussian blur
        sigma = random.uniform(0.5, 1.0)
        blurred = img.filter(ImageFilter.GaussianBlur(radius=sigma))
        augmented_images.append(blurred)
        
        # Random crop and resize
        width, height = img.size
        crop_size = int(min(width, height) * random.uniform(0.8, 0.95))
        left = random.randint(0, width - crop_size)
        top = random.randint(0, height - crop_size)
        cropped = img.crop((left, top, left + crop_size, top + crop_size))
        resized = cropped.resize((width, height), Image.BICUBIC)
        augmented_images.append(resized)
        
        # Return a random augmentation
        return random.choice(augmented_images)

def apply_burning_augmentation(img, device=None):
    """Apply burning effects to an image"""
    if not torch.is_tensor(img) and not hasattr(torch, 'Tensor'):
        raise ValueError("PyTorch is required for burning augmentation")
    
    # Create burn effect with random settings
    burn_intensity_min = random.uniform(0.1, 0.3)
    burn_intensity_max = random.uniform(0.4, 0.8)
    burn_pattern = random.choice(['random', 'edge', 'spot', 'streak'])
    
    burning_effect = PizzaBurningEffect(
        burn_intensity_min=burn_intensity_min,
        burn_intensity_max=burn_intensity_max,
        burn_pattern=burn_pattern
    )
    if device:
        burning_effect = burning_effect.to(device)
    
    # Apply burning effect
    if isinstance(img, torch.Tensor):
        if device:
            img = img.to(device)
    else:
        img = TVF.to_tensor(img)
        if device:
            img = img.to(device)
    
    result = burning_effect(img)
    
    # Randomly apply oven effect too
    if random.random() < 0.5:
        oven_effect = OvenEffect(
            effect_strength=random.uniform(0.5, 1.0),
            scipy_available=hasattr(np, 'ndimage')
        )
        if device:
            oven_effect = oven_effect.to(device)
        result = oven_effect(result)
    
    return result

def apply_mixup(img1, img2, device=None, alpha=0.3):
    """Apply MixUp augmentation to two images"""
    if not torch.is_tensor(img1) and not hasattr(torch, 'Tensor'):
        raise ValueError("PyTorch is required for MixUp augmentation")
    
    # Ensure both images are tensors and on the right device
    if not isinstance(img1, torch.Tensor):
        img1 = TVF.to_tensor(img1)
        if device:
            img1 = img1.to(device)
    elif device:
        img1 = img1.to(device)
    
    if not isinstance(img2, torch.Tensor):
        img2 = TVF.to_tensor(img2)
        if device:
            img2 = img2.to(device)
    elif device:
        img2 = img2.to(device)
    
    # Ensure both images have the same size
    if img1.shape != img2.shape:
        img2 = F.interpolate(img2.unsqueeze(0), size=(img1.shape[1], img1.shape[2]), 
                            mode='bilinear', align_corners=False).squeeze(0)
    
    # Generate mix parameter
    lam = np.random.beta(alpha, alpha)
    
    # Mix the images
    mixed = lam * img1 + (1 - lam) * img2
    
    return mixed

def apply_cutmix(img1, img2, device=None):
    """Apply CutMix augmentation to two images"""
    if not torch.is_tensor(img1) and not hasattr(torch, 'Tensor'):
        raise ValueError("PyTorch is required for CutMix augmentation")
    
    # Ensure both images are tensors and on the right device
    if not isinstance(img1, torch.Tensor):
        img1 = TVF.to_tensor(img1)
        if device:
            img1 = img1.to(device)
    elif device:
        img1 = img1.to(device)
    
    if not isinstance(img2, torch.Tensor):
        img2 = TVF.to_tensor(img2)
        if device:
            img2 = img2.to(device)
    elif device:
        img2 = img2.to(device)
    
    # Ensure both images have the same size
    if img1.shape != img2.shape:
        img2 = F.interpolate(img2.unsqueeze(0), size=(img1.shape[1], img1.shape[2]), 
                            mode='bilinear', align_corners=False).squeeze(0)
    
    # Copy the first image
    result = img1.clone()
    
    h, w = img1.shape[1], img1.shape[2]
    center_x, center_y = w // 2, h // 2
    
    # Generate coordinate grid
    y_coords, x_coords = torch.meshgrid(
        torch.arange(h, device=img1.device),
        torch.arange(w, device=img1.device),
        indexing='ij'
    )
    
    # Decide between wedge or circular segment
    if random.random() < 0.5:
        # Circular segment
        radius = random.uniform(0.3, 0.7) * min(h, w) / 2
        dist = torch.sqrt(((x_coords - center_x)**2 + (y_coords - center_y)**2).float())
        mask = (dist <= radius)
    else:
        # Wedge-shaped segment
        start_angle = random.uniform(0, 2 * np.pi)
        angle_width = random.uniform(np.pi/6, np.pi/2)  # 30 to 90 degrees
        
        # Calculate angle for all pixels simultaneously
        delta_x = (x_coords - center_x).float()
        delta_y = (y_coords - center_y).float()
        angles = torch.atan2(delta_y, delta_x)
        
        # Normalize angles to [0, 2Ï€]
        angles = torch.where(angles < 0, angles + 2 * np.pi, angles)
        
        # Mask for angle range
        if start_angle + angle_width <= 2 * np.pi:
            mask = (angles >= start_angle) & (angles <= start_angle + angle_width)
        else:
            # Handle overflow
            mask = (angles >= start_angle) | (angles <= (start_angle + angle_width) % (2 * np.pi))
    
    # Expand mask for all channels
    mask = mask.unsqueeze(0).expand_as(result)
    
    # Apply the mask
    result = torch.where(mask, img2, result)
    
    return result

def apply_burning_progression(img, num_steps=5, device=None):
    """Generate a series of images with increasing burning level"""
    if not torch.is_tensor(img) and not hasattr(torch, 'Tensor'):
        raise ValueError("PyTorch is required for burning progression augmentation")
    
    # Ensure image is a tensor and on the right device
    if not isinstance(img, torch.Tensor):
        img = TVF.to_tensor(img)
        if device:
            img = img.to(device)
    elif device:
        img = img.to(device)
    
    results = [img.clone()]  # Original image as first
    
    # Create burning effects with different intensities directly from original
    # (Not cumulative, to avoid unrealistic burning)
    for i in range(num_steps):
        # Increasing burning level
        intensity_min = 0.1 + (i * 0.15)
        intensity_max = 0.2 + (i * 0.15)
        
        burn_effect = PizzaBurningEffect(
            burn_intensity_min=intensity_min,
            burn_intensity_max=intensity_max
        )
        if device:
            burn_effect = burn_effect.to(device)
        
        # Apply effect directly to the original, not the previous stage
        burnt_img = burn_effect(img.clone())
        results.append(burnt_img)
    
    return results

def apply_segment_augmentation(img, device=None):
    """Apply segment-based effects to an image"""
    if not torch.is_tensor(img) and not hasattr(torch, 'Tensor'):
        raise ValueError("PyTorch is required for segment-based augmentation")
    
    if device is None and torch.cuda.is_available():
        device = torch.device('cuda')
    elif device is None:
        device = torch.device('cpu')
    
    # Create segment effect
    segment_effect = PizzaSegmentEffect(
        device=device,
        burning_min=random.uniform(0, 0.2),
        burning_max=random.uniform(0.5, 0.9)
    )
    
    # Apply effect
    if isinstance(img, torch.Tensor):
        img = img.to(device)
    else:
        img = TVF.to_tensor(img).to(device)
    
    result = segment_effect(img)
    
    return result
