version: '3.8'

services:
  # Standard Pizza Detection API
  pizza-api:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    volumes:
      - ./data:/app/data:ro
      - ./models:/app/models:ro
      - ./output:/app/output
      - ./logs:/app/logs
    environment:
      - MODEL_TYPE=standard
      - API_PORT=8000
      - LOG_LEVEL=INFO
    networks:
      - pizza-network
    restart: unless-stopped

  # Spatial-MLLM Enhanced Pizza Detection API
  pizza-api-spatial:
    build:
      context: .
      dockerfile: Dockerfile.spatial
    ports:
      - "8001:8001"
    volumes:
      - ./data:/app/data:ro
      - ./models:/app/models
      - ./output:/app/output
      - ./logs:/app/logs
    environment:
      - MODEL_TYPE=spatial
      - API_PORT=8001
      - LOG_LEVEL=INFO
      - CUDA_VISIBLE_DEVICES=0
      - SPATIAL_MODEL_PATH=/app/models/spatial_mllm/pizza_finetuned_v1.pth
      - SPATIAL_MODEL_ID=Diankun/Spatial-MLLM-subset-sft
    networks:
      - pizza-network
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    restart: unless-stopped

  # Load Balancer / API Gateway
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/ssl:/etc/nginx/ssl:ro
    depends_on:
      - pizza-api
      - pizza-api-spatial
    networks:
      - pizza-network
    restart: unless-stopped

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - pizza-network
    restart: unless-stopped

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    networks:
      - pizza-network
    restart: unless-stopped

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    volumes:
      - grafana-data:/var/lib/grafana
      - ./docker/grafana:/etc/grafana/provisioning:ro
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    networks:
      - pizza-network
    restart: unless-stopped

  # Model validation service
  model-validator:
    build:
      context: .
      dockerfile: Dockerfile.spatial
    command: python scripts/spatial_model_validation.py --continuous
    volumes:
      - ./models:/app/models:ro
      - ./output:/app/output
      - ./logs:/app/logs
    environment:
      - VALIDATION_INTERVAL=3600
      - CUDA_VISIBLE_DEVICES=0
    networks:
      - pizza-network
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    restart: unless-stopped

volumes:
  redis-data:
  prometheus-data:
  grafana-data:

networks:
  pizza-network:
    driver: bridge
